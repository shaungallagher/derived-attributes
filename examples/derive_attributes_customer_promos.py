"""
This example file demonstrates a real-world problem that Derived Attributes
can help solve.

PROBLEM

Imagine you are an online retailer that offers special promotions to customers
who meet some qualification criteria.  Those criteria are generated by analyzing
a customer's purchase history, which is represented as a JSON-like object.
Your business stakeholders keep coming up with new criteria, so you want a
solution that does not require code changes every time a new addition is required.

SOLUTION

With Derived Attributes, you and your business stakeholders can define the
criteria in a simple Subject-Verb-Object format.  Perhaps they're comfortable
working in Excel.  They can manage the criteria there, then export their
spreadsheet as a CSV file.  The customer's purchase history data can then
be evaluated against the Sentences defined in the CSV, producing Derived
Attributes.  These new attributes can be used to offer promotions.
"""

import csv
import io
from datetime import datetime

from src.derived_attributes.derive import DeriveAttributes, SentenceBuilder


def derive_attributes_customer_promos():
    # Create a CSV.  Normally this would be done in a spreadsheet tool like Excel,
    # but for the purpose of this demo, we'll put together the data in a plaintext
    # format, then generate a CSV.
    promotion_criteria = [
        {
            "attr": "customer_ltv",
            "subject": "source",
            "verb": "parse_sum",
            "object": "$.purchases[*].total",
            "notes": "Lifetime value",
        },
        {
            "attr": "customer_aov",
            "subject": "source",
            "verb": "parse_mean",
            "object": "$.purchases[*].total",
            "notes": "Average order value",
        },
        {
            "attr": "_order_dates",
            "subject": "source",
            "verb": "parse_list",
            "object": "$.purchases[*].date",
            "notes": "Get all order dates",
        },
        {
            "attr": "most_recent_order",
            "subject": "_order_dates",
            "verb": "max",
            "object": "",
            "notes": "Most recent order date",
        },
        {
            "attr": "purchase_in_last_30_days",
            "subject": "most_recent_order",
            "verb": "within_last_days",
            "object": 30,
            "notes": "Has made a purchase in the last 30 days",
        },
        {
            "attr": "pepsi_count",
            "subject": "source",
            "verb": "parse_len",
            "object": "$.purchases[*].brands[?(@ == 'pepsi')]",
            "notes": "Pepsi brand purchase count",
        },
        {
            "attr": "brand_loyalty_pepsi",
            "subject": "pepsi_count",
            "verb": ">",
            "object": 2,
            "notes": "Signifies customer likes Pepsi products",
        },
    ]

    # Create a StringIO object to hold the CSV data
    output = io.StringIO()

    # Write the dictionary to the StringIO object as CSV
    writer = csv.writer(output)

    # Write the header, minus the Notes field
    writer.writerow(["attr", "subject", "verb", "obj"])

    # Write the data
    for row in promotion_criteria:
        writer.writerow([row["attr"], row["subject"], row["verb"], row["object"]])

    # Get the string value of the CSV
    promotion_criteria_csv = output.getvalue()

    # Close the StringIO object
    output.close()

    # Get the customer purchase history.  Normally this would be fetched from
    # the database, but for the purpose of this demo, we'll construct it.
    purchase_history = {
        "purchases": [
            {
                "transaction_id": 12345,
                "date": datetime(2000, 1, 1, 12, 30),
                "total": 25.80,
                "brands": [
                    "heinz",
                    "hormel",
                    "nestle",
                    "pepsi",
                ],
            },
            {
                "transaction_id": 23456,
                "date": datetime(2000, 1, 15, 16, 15),
                "total": 138.25,
                "brands": [
                    "colgate",
                    "pampers",
                    "gillette",
                    "pepsi",
                    "purina",
                    "tide",
                    "quaker",
                    "dannon",
                ],
            },
            {
                "transaction_id": 34567,
                "date": datetime(2000, 1, 28, 10, 25),
                "total": 51.95,
                "brands": [
                    "pepsi",
                    "dannon",
                    "nestle",
                    "charmin",
                    "gerber",
                ],
            },
            {
                "transaction_id": 45678,
                "date": datetime(2000, 2, 5, 18, 45),
                "total": 38.25,
                "brands": [
                    "nestle",
                    "kraft",
                    "nestle",
                    "kelloggs",
                    "general-mills",
                ],
            },
        ]
    }

    # Construct Sentences from the CSV
    sentences = SentenceBuilder.from_csv(promotion_criteria_csv)

    # Generate the Derived Attributes
    da = DeriveAttributes(sentences, purchase_history)
    derived_attributes = da.derive()

    # Print the expected values
    expected = {
        "customer_ltv": 25.80 + 138.25 + 51.95 + 38.25,
        "customer_aov": (25.80 + 138.25 + 51.95 + 38.25) / 4,
        "most_recent_order": datetime(2000, 2, 5, 18, 45),
        "purchase_in_last_30_days": False,
        "pepsi_count": 3,
        "brand_loyalty_pepsi": True,
    }
    print("Expected output:")
    print(expected)

    # Output the results
    print("Derived Attributes:")
    print(derived_attributes)


if __name__ == "__main__":
    derive_attributes_customer_promos()
